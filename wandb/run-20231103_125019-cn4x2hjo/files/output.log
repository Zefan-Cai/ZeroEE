11/03/2023 12:50:24 - INFO - __main__ - ***** Running training *****
11/03/2023 12:50:24 - INFO - __main__ -   Num examples = 345068
11/03/2023 12:50:24 - INFO - __main__ -   Num Epochs = 20
11/03/2023 12:50:24 - INFO - __main__ -   Instantaneous batch size per device = 12
11/03/2023 12:50:24 - INFO - __main__ -   Total train batch size (w. parallel, distributed & accumulation) = 72
11/03/2023 12:50:24 - INFO - __main__ -   Gradient Accumulation steps = 1
11/03/2023 12:50:24 - INFO - __main__ -   Total optimization steps = 95860
  0%|                                                                                                                                                             | 1/95860 [00:20<545:00:04, 20.47s/it]11/03/2023 12:50:44 - INFO - __main__ -   Step: 1, LR: 6.955312119631369e-09, Loss: 4.692725658416748
11/03/2023 12:50:44 - INFO - __main__ - args.eval_steps is None. Set to do eval after each epoch, which is 4793
[2023-11-03 12:50:44,919] [WARNING] [stage3.py:1898:step] 1 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
  0%|                                                                                                                                                             | 2/95860 [00:45<616:07:25, 23.14s/it]11/03/2023 12:51:09 - INFO - __main__ -   Step: 2, LR: 1.3910624239262737e-08, Loss: 4.706351280212402
[2023-11-03 12:51:09,928] [WARNING] [stage3.py:1898:step] 4 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
[2023-11-03 12:51:24,701] [WARNING] [stage3.py:1898:step] 1 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
  0%|                                                                                                                                                             | 3/95860 [01:00<514:24:15, 19.32s/it]11/03/2023 12:51:24 - INFO - __main__ -   Step: 3, LR: 2.0865936358894106e-08, Loss: 4.822046279907227
[2023-11-03 12:51:44,889] [WARNING] [stage3.py:1898:step] 5 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
  0%|                                                                                                                                                             | 4/95860 [01:20<523:32:11, 19.66s/it]11/03/2023 12:51:44 - INFO - __main__ -   Step: 4, LR: 2.7821248478525474e-08, Loss: 4.621413707733154
  0%|                                                                                                                                                             | 5/95860 [01:35<477:32:03, 17.93s/it]11/03/2023 12:51:59 - INFO - __main__ -   Step: 5, LR: 3.4776560598156846e-08, Loss: 4.945125579833984
[2023-11-03 12:51:59,761] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
  0%|                                                                                                                                                             | 6/95860 [01:53<482:38:14, 18.13s/it]11/03/2023 12:52:18 - INFO - __main__ -   Step: 6, LR: 4.173187271778821e-08, Loss: 4.876649379730225
[2023-11-03 12:52:18,260] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
  0%|                                                                                                                                                             | 7/95860 [02:13<497:10:35, 18.67s/it]11/03/2023 12:52:38 - INFO - __main__ -   Step: 7, LR: 4.8687184837419583e-08, Loss: 4.800994396209717
[2023-11-03 12:52:38,057] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
  0%|                                                                                                                                                             | 8/95860 [02:29<477:35:50, 17.94s/it]11/03/2023 12:52:54 - INFO - __main__ -   Step: 8, LR: 5.564249695705095e-08, Loss: 4.71408224105835
[2023-11-03 12:52:54,420] [WARNING] [stage3.py:1898:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
  0%|                                                                                                                                                             | 9/95860 [02:45<454:01:27, 17.05s/it]11/03/2023 12:53:09 - INFO - __main__ -   Step: 9, LR: 6.259780907668233e-08, Loss: 4.885346412658691
[2023-11-03 12:53:09,527] [WARNING] [stage3.py:1898:step] 4 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
  0%|                                                                                                                                                            | 10/95860 [02:58<428:13:19, 16.08s/it]11/03/2023 12:53:23 - INFO - __main__ -   Step: 10, LR: 6.955312119631369e-08, Loss: 4.788396835327148
[2023-11-03 12:53:23,440] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
  0%|                                                                                                                                                            | 11/95860 [03:15<428:54:24, 16.11s/it]11/03/2023 12:53:39 - INFO - __main__ -   Step: 11, LR: 7.650843331594506e-08, Loss: 4.772351264953613
[2023-11-03 12:53:39,609] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
  0%|                                                                                                                                                            | 12/95860 [03:29<417:53:35, 15.70s/it]11/03/2023 12:53:54 - INFO - __main__ -   Step: 12, LR: 8.346374543557642e-08, Loss: 4.924307346343994
[2023-11-03 12:53:54,359] [WARNING] [stage3.py:1898:step] 3 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
  0%|                                                                                                                                                            | 13/95860 [03:50<455:52:19, 17.12s/it]11/03/2023 12:54:14 - INFO - __main__ -   Step: 13, LR: 9.04190575552078e-08, Loss: 4.77800178527832
